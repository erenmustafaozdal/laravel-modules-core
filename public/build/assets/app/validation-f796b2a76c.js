var theValidation,Validation={form:null,options:{},validateInitialized:!1,init:function(t){theValidation=this,this.options=$.extend(!0,this.getDefaultOptions(),t),this.form=$(this.options.src),this.form.validate(this.options.validate),this.validateInitialized=!0,this.form.find("input").keypress(function(t){return 13==t.which?(theValidation.form.validate().form()&&theValidation.form.submit(),!1):void 0})},removeElementRule:function(t,i){this.form.find('input[name="'+t+'"]').rules("remove",i)},addElementRule:function(t,i){this.form.find('input[name="'+t+'"]').rules("add",i)},getDefaultOptions:function(){return{src:"",isAjax:!1,validate:{errorElement:"em",errorClass:"help-block",focusInvalid:!1,rules:{},messages:{},invalidHandler:function(t,i){LMCApp.getNoty({message:LMCApp.lang.formError.defaultMessage,title:LMCApp.lang.formError.defaultTitle,type:"error"})},highlight:function(t){$(t).closest(".form-group").addClass("has-error")},success:function(t){t.closest(".form-group").removeClass("has-error"),t.remove()},errorPlacement:function(t,i){t.insertAfter(i)},submitHandler:function(t){return theValidation.options.isAjax?void(theValidation.options.submitAjax&&theValidation.options.submitAjax.call(void 0,theValidation)):void t.submit()}}}}};